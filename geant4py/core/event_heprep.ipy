import numpy as np
import re
from copy import deepcopy


class Event_heprep:
    def __init__(self, heprep_file, header_heprep_file, new_file_name=None):
        '''
        Event_heprep: rewrites the heprep file to restructure it so types are
        entered first then instances are entered.
        Event_heprep also strips the first 27 lines from the Fermi example and
        appends it to the front of the heprep file.
        Parameters:
        heprep_file is the generated event heprep file from geant4py
        header_heprep_file is an example heprep file from Fermi Lab.
        new_file_name is the desired name of the new file
        (ie 'murs_geometry.heprep')
        '''

        self.heprep_file = heprep_file
        self.header_heprep_file = header_heprep_file
        self.new_file_name = new_file_name

    def cleaned_heprep_file(self):
        # cleaned_heprep_file generates the corrected version of the heprep
        # file that is viewable in ParaView
        # Gathering information from old heprep

        old_lines, header_lines = copy_heprep_file(self.heprep_file,
                                                   self.header_heprep_file)
        data_lines = event_positions(old_lines, header_lines)
        write_new_heprep_file(data_lines, fname_new=self.new_file_name)


def copy_heprep_file(heprep_file, header_heprep_file):
    '''
    copy_heprep_file copies the first 4 lines from an example heprep file and
    then appends the lines from the heprep file of interest starting at line 3.
    Parameters:
    heprep_file: file to be fixed
    header_heprep_file: example header file
    '''
    with open(heprep_file, 'r') as infile:
        old_lines = [l.rstrip('\n') for l in infile]
    with open(header_heprep_file, 'r') as infile:
        file_header = [l.rstrip('\n') for l in infile]

    new_lines = deepcopy(old_lines)
    lines_removed = remove_words(new_lines)
    header_lines = deepcopy(file_header)

    geo_names = ""
    for idx, l in enumerate(lines_removed):
        line_split = re.split('\s|(?<!\d)["=](?!\d)|"', l)
        if '<type' in line_split:
            line = re.split('\s|(?<!\d)[<=>/](?!\d)', lines_removed[idx])
            for position, word in enumerate(line):
                if word == 'name':
                    geo_names = line[position+1]  # store the geometry name
                    try:
                        if line[position+2] != '""':
                            geo_names = line_split[position+1] + ' ' + line_split[position+2] # check if it is two words
                    except IndexError:
                        pass
                if geo_names != "":
                    break

    # Rename geometry in old example heprep with first geometry name from
    # heprep file
    for idx, l in enumerate(header_lines):
        split = re.split('\s|(?<!\d)["=](?!\d)|"', l)
        if '<type' in split:
            header_lines[idx] = '<type name="'+geo_names+'">'
            break

    return lines_removed, header_lines


def write_new_heprep_file(new_lines, fname_new=None):
    '''
    write_new_heprep_file takes the cleaned heprep lines and writes a new
    file
    '''
    with open(fname_new, 'w') as infile:
        infile.write('\n'.join(new_lines) + '\n')
    print('Done')


def remove_words(new_lines):
    '''
    remove_words takes lines from copy_heprep_file and strips away three
    different phrases
    '''
    new_lines = [l.replace('showLabel="NONE"', "") for l in new_lines]
    new_lines = [l.replace('version="null"', "") for l in new_lines]
    new_lines = [l.replace('heprep:', "") for l in new_lines]
    return new_lines


def event_positions(old_lines, header_lines):
    '''
    Event_positions finds the starting and ending positions of each type
    geometry
    Parameters:
    old_lines - is from the heprep file generated by geant4py
    '''
    counter = []
    for cnt, l in enumerate(old_lines):
        line_split = re.split('\s|(?<!\d)["=/](?!\d)|"', l)
        if ('Event' in line_split) & ('Data' in line_split):
            counter.append(cnt)
    counter.append(cnt)
    info = collect_event_info(old_lines, counter, header_lines)
    return info


def collect_event_info(lines, counter, new_lines):
    '''
    collect_event_info collects relevant data from the event heprep files. It
    ignores all the geometry aspects and finds when the Event Data starts. It
    records this position and then it iterates through all the event data
    starting at that position, and continues to append data to the file.
    Parameters:
    lines - are the old heprep lines
    counter - position of event data
    new_lines - new heprep file lines
    '''
    positions = []
    difference = np.diff(counter)
    cnt_types = []
    geo_names = []
    geometry_data = []
    for i, (cnt, diff) in enumerate(zip(counter, difference)):
        data_range = cnt + diff
        start = cnt
        while start < data_range:
            line_split = re.split('\s|(?<!\d)["=/](?!\d)|"', lines[start])
            if ('<type' in line_split) & ('name' in line_split):
                Start = ''
                End = '>'
                pos = 2
                while Start != End:
                    geo_names.append(line_split[line_split.index('name') + pos])
                    pos += 1
                    Start = line_split[line_split.index('name') + pos]
                positions.append(start)
                cnt_types.append(1)
                name = ' '.join(geo_names)
                points_combine = {'Geo Name': name}
                geometry_data.append(points_combine)
            start += 1
            geo_names = []
    positions.append(start)
    difference = np.diff(positions)

    new_lines = fix_type_name(new_lines, geometry_data[0]['Geo Name'])
    # This section only collects the information that is relevant for
    # making the new heprep file. It ignores all those words and appends
    # everything else. It then closes the types and typetree.
    for i, (cnt, diff) in enumerate(zip(positions, difference)):
        data_range = cnt + diff
        start = cnt
        while start < data_range:
            line_split = re.split('\s|(?<!\d)["=/](?!\d)|"', lines[start])
            if ('<instance>' in line_split) or ('primitive>' in line_split) or \
               ('point>' in line_split) or ('<primitive>' in line_split) or \
                ('type>' in line_split) or ('instance>' in line_split) or \
                ('<point' in line_split):
                    pass
            else:
                if i == 0:  # removing <type Event Data because it
                            # happens at the top in the header
                    pass
                else:
                    new_lines.append(lines[start])
            start += 1
    for i in range(len(cnt_types)):
        new_lines.append('</type>')  # closing all the geometries that
                                     # encompass other geometries
    new_lines.append('</typetree>')  # closing the geometry tree

    lines = event_instances(new_lines, lines, positions, geometry_data)
    return new_lines


def event_instances(new_lines, lines, positions, geometry_data):
    '''
    event_instances loops through all the event data files in the directory,
    and creates all of the instances.
    '''
    x = 0
    y = 0
    z = 0
    new_lines.append('<instancetree name="G4GeometryData"')
    new_lines.append('typetreename="G4GeometryTypes" typetreeversion="1.0" version="1.0">')
    new_lines.append('<treeid name="geometry.heprep#G4GeometryData"')
    new_lines.append('qualifier="top-level" version="1.0"/>')
    new_lines.append(' <instance type="' + geometry_data[0]['Geo Name'] + '">')
    position_tracker = 0
    check_variable = 0
    positions[2] = np.sum(1 for line in lines)  # update the length of the file accordingly
    difference = np.diff(positions)
    for i, (cnt, diff) in enumerate(zip(positions, difference)):
        data_range = cnt + diff
        start = cnt
        while start < data_range:
            line_split = re.split('\s|(?<!\d)["=/](?!\d)|"', lines[start])
            if ('ID' in line_split):
                if position_tracker < 4:  # skipping ID's in header of heprep
                    position_tracker += 1
                    pass
                else:
                    new_lines.append('</instance>')
            elif ('Visibility' in line_split):
                new_lines.append(' <instance type="' + geometry_data[0]['Geo Name'] + '/'+
                             geometry_data[1]['Geo Name']+'">')
            elif ('<point' in line_split):
                if 'x' in line_split:
                    x = float(line_split[line_split.index('x') + 2])
                if 'y' in line_split:
                    y = float(line_split[line_split.index('y') + 2])
                if 'z' in line_split:
                    z = float(line_split[line_split.index('z') + 2])
                new_lines.append('<point x="'+str(x) +
                                 '" y="'+str(y) +
                                 '" z="'+str(z)+'"/>')
            start += 1
    new_lines.append('</instance>')
    new_lines.append('</instance>')  # closing all the geometries that
    # encompass other geometries
    new_lines.append('</instancetree>')
    new_lines.append('</heprep>')


def fix_type_name(new_lines, geo_names):
    for idx, l in enumerate(new_lines):
        split = re.split('\s|(?<!\d)["=](?!\d)|"', l)
        if '<type' in split:
            new_lines[idx] = '<type name="'+str(geo_names)+'">'
            break
    return new_lines


def isfloat(value):
    '''
    isfloat takes a value and determines if it is a float or not
    '''
    try:
        float(value)
        return True
    except ValueError:
        return False
